{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.module.css","components/Phonebook/Phonebook.module.css","redux/store.js","components/ContactForm/ContactForm.js","redux/actions.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Phonebook/Phonebook.js","App.js","index.js"],"names":["module","exports","rootReducer","combineReducers","contacts","state","type","payload","console","log","filter","contact","id","store","createStore","composeWithDevTools","connect","dispatch","onSubmit","actions","useState","name","setName","number","setNumber","onFormChange","target","value","checkContactList","normalizedName","toLocaleLowerCase","find","alert","newContactId","shortid","generate","addContact","resetForm","className","s","form","e","preventDefault","label","htmlFor","span","input","placeholder","pattern","title","required","onChange","btn","onDeleteContact","ul","map","li","onClick","Filter","Phonebook","box","divBox","boxList","App","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5582deaa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"ContactList_li__Ra-Kd\",\"ul\":\"ContactList_ul__3ll3V\",\"btn\":\"ContactList_btn__2RcnT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2byOO\",\"span\":\"Filter_span__uSHYk\",\"input\":\"Filter_input__3V-pP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3oJMD\",\"label\":\"ContactForm_label__3nCr6\",\"input\":\"ContactForm_input__sV5Ua\",\"span\":\"ContactForm_span__3WPFZ\",\"btn\":\"ContactForm_btn__2M8G0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Phonebook_title__1b6ZS\",\"box\":\"Phonebook_box__2VF9O\",\"divBox\":\"Phonebook_divBox__10Y2k\",\"boxList\":\"Phonebook_boxList__YD7vV\"};","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// const initialState = {\n//   contacts: {\n//     items: [],\n//     filter: '',\n//   },\n// };\n\n// const reducer = (state = initialState, { type, payload }) => {\n//   //   console.log(state);\n//   console.log(type);\n//   console.log(payload);\n\n//   switch (type) {\n//     case 'contact/submit':\n//       return {\n//         ...state,\n//         contacts: {\n//           ...state.contacts,\n//           items: [...state.contacts.items, payload],\n//         },\n//         // contacts: {\n//         //   items: [...state.contacts.items, payload],\n//         // },\n//       };\n\n//     case 'contact/delete':\n//       return state.contacts.items.filter(contact => contact.id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const contactsInitialState = {\n//   items: [],\n//   filter: '',\n// };\n\nconst contactsReducer = (state = [], { type, payload }) => {\n  console.log(state);\n  switch (type) {\n    case 'contact/submit':\n      return [...state, payload];\n    // {\n    //   ...state,\n    //   items: [...state.items, payload],\n    // };\n\n    case 'contact/delete':\n      return state.filter(contact => contact.id !== payload);\n\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n});\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/actions';\nimport shortid from 'shortid';\nimport s from './ContactForm.module.css';\n\nfunction ContactForm({ onSubmit, contacts }) {\n  console.log(contacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const onSubmitForm = e => {\n    e.preventDefault();\n    resetForm();\n    checkContactList();\n  };\n\n  const onFormChange = ({ target }) => {\n    const { name, value } = target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const addContact = () => {\n    const newContactId = shortid.generate();\n    const newContact = { name, number, id: newContactId };\n    onSubmit(newContact);\n  };\n\n  const checkContactList = () => {\n    const normalizedName = name.toLocaleLowerCase();\n    contacts.find(\n      contact => contact.name.toLocaleLowerCase() === normalizedName,\n    )\n      ? alert(`${name} is already in contacts`)\n      : addContact();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={onSubmitForm}>\n      <label className={s.label} htmlFor={shortid.generate()}>\n        <span className={s.span}>Name</span>\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Григор Григорян\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={onFormChange}\n          id={shortid.generate()}\n        />\n      </label>\n      <label className={s.label} htmlFor={shortid.generate()}>\n        <span className={s.span}>Number</span>\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"111-22-33\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={onFormChange}\n          id={shortid.generate()}\n        />\n      </label>\n      <button className={s.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    contacts: state.contacts,\n    // contacts: {\n    //   items: state.contacts.items,\n    //   filter: state.contacts.filter,\n    // },\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // onDeleteContact: contactId => dispatch(actions.deleteContact(contactId)),\n    onSubmit: contact => dispatch(actions.submitContacts(contact)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","export const deleteContact = id => ({\n  type: 'contact/delete',\n  payload: id,\n});\n\nexport const submitContacts = contact => ({\n  type: 'contact/submit',\n  payload: contact,\n});\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/actions';\nimport s from './ContactList.module.css';\n\nfunction ContactList({ contacts, onDeleteContact }) {\n  console.log(contacts);\n  return (\n    <ul className={s.ul}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={s.li} key={id}>\n          {name}: {number}\n          <button className={s.btn} onClick={() => onDeleteContact(id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    contacts: state.contacts,\n    // contacts: {\n    //   items: state.contacts.items,\n    //   filter: state.contacts.filter,\n    // },\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(actions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nfunction Filter({ value, onChange }) {\r\n  return (\r\n    <label className={s.label}>\r\n      <span className={s.span}>Find contacts by name</span>\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      ></input>\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","// import { useState } from 'react';\n// import { connect } from 'react-redux';\n// import * as actions from '../../redux/actions';\n// import defaultContacts from './defaultContacts.json';\nimport s from './Phonebook.module.css';\nimport ContactForm from '../ContactForm/ContactForm';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\n// import useLocalStorage from '../../hooks/useLocalStorage';\n\nfunction Phonebook() {\n  // const [contacts, setContacts] = useLocalStorage('contacts', defaultContacts);\n  // const [filter, setFilter] = useState('');\n\n  // const deleteContact = contactId => {\n  //   setContacts(prev => {\n  //     return prev.filter(contact => contact.id !== contactId);\n  //   });\n  // };\n\n  // const formSubmitHandler = contact => {\n  //   setContacts([contact, ...contacts]);\n  // };\n\n  // const changeFilter = ({ target }) => {\n  //   setFilter(target.value);\n  // };\n\n  // const getFilteredContacts = () => {\n  //   const normalizedFilter = filter.toLocaleLowerCase();\n  //   return contacts.filter(contact =>\n  //     contact.name.toLocaleLowerCase().includes(normalizedFilter),\n  //   );\n  // };\n  // console.log(contacts.items);\n  // console.log(contacts.filter);\n\n  return (\n    <div className={s.box}>\n      <div>\n        <h1 className={s.title}>Phonebook</h1>\n        {/* <ContactForm onSubmit={onSubmit} contacts={contacts.items} /> */}\n        {/* <ContactForm onSubmit={onSubmit} contacts={contacts.items} /> */}\n        <ContactForm />\n      </div>\n      <div className={s.divBox}>\n        <h2 className={s.title}>Contacts</h2>\n        <div className={s.boxList}>\n          <Filter />\n          <ContactList\n          // contacts={contacts.items}\n          // contacts={getFilteredContacts()}\n          // onDeleteContact={onDeleteContact}\n          />\n        </div>\n      </div>\n      {/* <div className={s.divBox}>\n        <h2 className={s.title}>Contacts</h2>\n        <div className={s.boxList}>\n          <Filter value={filter} onChange={changeFilter} />\n          <ContactList\n            contacts={getFilteredContacts()}\n            onDeleteContact={onDeleteContact}\n          />\n        </div>\n      </div> */}\n    </div>\n  );\n}\n\nexport default Phonebook;\n\n// const mapStateToProps = state => {\n//   console.log(state);\n//   return {\n//     contacts: {\n//       items: state.contacts.items,\n//       filter: state.contacts.filter,\n//     },\n//   };\n// };\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     onDeleteContact: contactId => dispatch(actions.deleteContact(contactId)),\n//     onSubmit: contact => dispatch(actions.submitContacts(contact)),\n//   };\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Phonebook);\n","import './App.css';\r\nimport Phonebook from './components/Phonebook/Phonebook';\r\n\r\nfunction App() {\r\n  return (\r\n    <section className=\"container\">\r\n      <Phonebook />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\n\nconsole.log(store.getState());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}